/*! For license information please see b078aec5.c5d53474.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{140:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return s}));var a=n(2),i=(n(0),n(161)),l=n(165),r=n(164);const o={id:"relationships",title:"Relationships",sidebar_label:"Relationships"},c={id:"graphql_schema/relationships",title:"Relationships",description:"GraphQLize identifies the relationships between database tables using their foreign keys, and generate appropriate relationship fields (connections) in the resulting GraphQL schema.",source:"@site/docs/graphql_schema/relationships.mdx",permalink:"/docs/graphql_schema/relationships",editUrl:"https://github.com/graphqlize/graphqlize.github.io/tree/source/docs/graphql_schema/relationships.mdx",sidebar_label:"Relationships",sidebar:"docs",previous:{title:"Types & Fields",permalink:"/docs/graphql_schema/types-and-fields"},next:{title:"Custom Scalar Types",permalink:"/docs/graphql_schema/custom-scalar-types"}},b=[{value:"One to One",id:"one-to-one",children:[]},{value:"One to Many",id:"one-to-many",children:[]},{value:"Many to Many",id:"many-to-many",children:[]},{value:"Foreign Key Without the Id Suffix",id:"foreign-key-without-the-id-suffix",children:[]}],p={rightToc:b};function s({components:e,...t}){return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"GraphQLize identifies the relationships between database tables using their foreign keys, and generate appropriate relationship fields (connections) in the resulting GraphQL schema."),Object(i.b)("h2",{id:"one-to-one"},"One to One"),Object(i.b)("p",null,Object(i.b)("img",Object(a.a)({parentName:"p"},{src:"/img/address_city_country_er_diagram.png",alt:null}))),Object(i.b)("p",null,"For the database table relationships like above, GraphQLize infers two ",Object(i.b)("inlineCode",{parentName:"p"},"one-to-one")," relationships."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"An ",Object(i.b)("inlineCode",{parentName:"p"},"address")," is associated with a ",Object(i.b)("inlineCode",{parentName:"p"},"city")," via ",Object(i.b)("inlineCode",{parentName:"p"},"city_id")," column in the ",Object(i.b)("inlineCode",{parentName:"p"},"address")," table.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"A ",Object(i.b)("inlineCode",{parentName:"p"},"city")," is associated with a ",Object(i.b)("inlineCode",{parentName:"p"},"country")," via ",Object(i.b)("inlineCode",{parentName:"p"},"country_id")," column in the ",Object(i.b)("inlineCode",{parentName:"p"},"city")," table."))),Object(i.b)("p",null,"GraphQLize then create two object relationships in the ",Object(i.b)("inlineCode",{parentName:"p"},"Address")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"City")," type respectively."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Address {\n  # ...\n  city: City!\n}\n\ntype City {\n  # ...\n  country: Country!\n}\n")),Object(i.b)("p",null,"The generated field name is the ",Object(i.b)("em",{parentName:"p"},"camelCase")," version of the corresponding column name with the id suffix (",Object(i.b)("inlineCode",{parentName:"p"},"_id"),") removed."),Object(i.b)("p",null,"Here are some of the examples."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Column Name"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"GraphQL Field Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"actor_id"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"actor")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"original_language_id"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"originalLanguage")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"reports_to_employee_id"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"reportsToEmployee")))),Object(i.b)("p",null,"By default, GraphQLize assumes ",Object(i.b)("inlineCode",{parentName:"p"},"_id")," as the suffix for foreign keys in both Postgres and MySQL."),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/4"}),"In future"),", GraphQLize will provide a configuration to override this default behavior."),Object(i.b)("h2",{id:"one-to-many"},"One to Many"),Object(i.b)("p",null,Object(i.b)("img",Object(a.a)({parentName:"p"},{src:"/img/address_city_country_er_diagram.png",alt:null}))),Object(i.b)("p",null,"For the database table relationships like above, GraphQLize infers two ",Object(i.b)("inlineCode",{parentName:"p"},"one-to-many")," relationships."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"A ",Object(i.b)("inlineCode",{parentName:"p"},"city")," has many ",Object(i.b)("inlineCode",{parentName:"p"},"address")," (addresses) via ",Object(i.b)("inlineCode",{parentName:"p"},"city_id")," column in the ",Object(i.b)("inlineCode",{parentName:"p"},"address")," table.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"A ",Object(i.b)("inlineCode",{parentName:"p"},"country")," has many ",Object(i.b)("inlineCode",{parentName:"p"},"city")," (cities) via ",Object(i.b)("inlineCode",{parentName:"p"},"country_id")," column in the ",Object(i.b)("inlineCode",{parentName:"p"},"city")," table."))),Object(i.b)("p",null,"GraphQLize then create two array relationships in the ",Object(i.b)("inlineCode",{parentName:"p"},"City")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"Country")," type respectively."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type City {\n  # ...\n  addresses: [Address]!\n}\n\ntype Country {\n  # ...\n  cities: [City]!\n}\n")),Object(i.b)("p",null,"The generated field name is the ",Object(i.b)("em",{parentName:"p"},"camelCase")," version of the corresponding target table's pluralized name."),Object(i.b)("p",null,"If a table has multiple foreign keys to the same table as below,"),Object(i.b)(l.a,{defaultValue:"postgres",values:[{label:"Postgres",value:"postgres"},{label:"MySQL",value:"mysql"}],mdxType:"Tabs"},Object(i.b)(r.a,{value:"postgres",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE language (\n  language_id serial PRIMARY KEY,\n  name character(20) NOT NULL\n);\n\nCREATE TABLE film (\n  film_id serial PRIMARY KEY,\n  title character varying(255) NOT NULL,\n\n  language_id smallint NOT NULL REFERENCES language(language_id),\n  original_language_id smallint REFERENCES language(language_id)\n);\n\n"))),Object(i.b)(r.a,{value:"mysql",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE language (\n  language_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  name CHAR(20) NOT NULL,\n  PRIMARY KEY (language_id)\n);\n\nCREATE TABLE film (\n  film_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  title VARCHAR(255) NOT NULL,\n  language_id TINYINT UNSIGNED NOT NULL,\n  original_language_id TINYINT UNSIGNED DEFAULT NULL,\n  PRIMARY KEY  (film_id),\n  CONSTRAINT fk_film_language FOREIGN KEY (language_id) REFERENCES language (language_id),\n  CONSTRAINT fk_film_language_original FOREIGN KEY (original_language_id) REFERENCES language (language_id)\n);\n")))),Object(i.b)("p",null,"GraphQLize creates two ",Object(i.b)("inlineCode",{parentName:"p"},"one-to-many")," relationships between ",Object(i.b)("inlineCode",{parentName:"p"},"language")," and ",Object(i.b)("inlineCode",{parentName:"p"},"films"),". "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"language")," has many ",Object(i.b)("inlineCode",{parentName:"li"},"film")," (films) via ",Object(i.b)("inlineCode",{parentName:"li"},"language_id")," column in the ",Object(i.b)("inlineCode",{parentName:"li"},"film")," table. "),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"language")," has many ",Object(i.b)("inlineCode",{parentName:"li"},"film")," (films) via ",Object(i.b)("inlineCode",{parentName:"li"},"original_language_id")," column in the ",Object(i.b)("inlineCode",{parentName:"li"},"film")," table.")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Language {\n  languageId: Int!\n  name: String!\n\n  films: [Film]!\n  originalLanguageFilms: [Film]!\n}\n")),Object(i.b)("p",null,"The nomenclature used here to generate the field name follows the below logic."),Object(i.b)("p",null,"If the column name (",Object(i.b)("inlineCode",{parentName:"p"},"language_id"),") after the removal of the foreign key suffix (",Object(i.b)("inlineCode",{parentName:"p"},"language"),") matches the source table name, then the resulting field name is the ",Object(i.b)("em",{parentName:"p"},"camelCase")," version of the pluralized form of the  table (",Object(i.b)("inlineCode",{parentName:"p"},"films"),")."),Object(i.b)("p",null,"If the column name (",Object(i.b)("inlineCode",{parentName:"p"},"original_language_id"),") after the removal of the foreign key suffix (",Object(i.b)("inlineCode",{parentName:"p"},"original_language"),") did not match the source table name, then GraphQLize removes the foreign key suffix and concatenate with the pluralized form of the target table and then convert it to its ",Object(i.b)("em",{parentName:"p"},"camelCase")," version (",Object(i.b)("inlineCode",{parentName:"p"},"originalLanguageFilms"),")."),Object(i.b)("h2",{id:"many-to-many"},"Many to Many"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"many-to-many")," relationship is a bit tricky to figure out. "),Object(i.b)("p",null,"GraphQLize traverses each table's metadata to figure out whether it is an ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Associative_entity"}),"associative table")," or not. "),Object(i.b)("p",null,"A table is considered as an associative table if it satisfies the following two criteria"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"It should have a primary key made of two columns."),Object(i.b)("li",{parentName:"ol"},"These primary key columns should be a subset of the foreign key columns present in that table. ")),Object(i.b)("p",null,"For the database table relationships like below,"),Object(i.b)("p",null,Object(i.b)("img",Object(a.a)({parentName:"p"},{src:"/img/film_actor_er_diagram.png",alt:null}))),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"film_actor")," table is an associative table as"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"It has ",Object(i.b)("inlineCode",{parentName:"li"},"actor_id")," and ",Object(i.b)("inlineCode",{parentName:"li"},"film_id")," as the primary keys."),Object(i.b)("li",{parentName:"ol"},"The primary keys ",Object(i.b)("inlineCode",{parentName:"li"},"{actor_id, film_id}")," is a subset of foreign keys ",Object(i.b)("inlineCode",{parentName:"li"},"{actor_id, film_id}")," of the ",Object(i.b)("inlineCode",{parentName:"li"},"film_actor")," table. ")),Object(i.b)("p",null,"In this scenario, GraphQLize creates two array fields for these two ",Object(i.b)("inlineCode",{parentName:"p"},"many-to-many")," relationships.  "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Film {\n  actors: [Actor]!\n  # ...\n}\ntype Actor {\n  films: [Film]!\n  # ...\n}\n")),Object(i.b)("p",null,"For the relationships between ",Object(i.b)("inlineCode",{parentName:"p"},"film")," & ",Object(i.b)("inlineCode",{parentName:"p"},"film_actor")," and ",Object(i.b)("inlineCode",{parentName:"p"},"film_actor")," & ",Object(i.b)("inlineCode",{parentName:"p"},"actor")," tables, GraphQLize creates the following fields. "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Film {\n  # ...\n  filmActors: [FilmActor]!\n}\n\ntype FilmActor {\n  actor: Actor!\n  film: Film!\n  # ...\n}\n\ntype Actor {\n  # ...\n  filmActors: [FilmActor]!\n}\n")),Object(i.b)("h2",{id:"foreign-key-without-the-id-suffix"},"Foreign Key Without the Id Suffix"),Object(i.b)("p",null,"If the foreign key in question doesn't have the id suffix ",Object(i.b)("inlineCode",{parentName:"p"},"_id"),", then the GraphQLize follows a slightly different approach to name the fields."),Object(i.b)("p",null,"Say, we have a below schema"),Object(i.b)(l.a,{defaultValue:"postgres",values:[{label:"Postgres",value:"postgres"},{label:"MySQL",value:"mysql"}],mdxType:"Tabs"},Object(i.b)(r.a,{value:"postgres",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE continent (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL\n);\nCREATE TABLE country (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  continent_identifier int REFERENCES continent(id)\n);\n"))),Object(i.b)(r.a,{value:"mysql",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE continent (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name TEXT NOT NULL\n);\nCREATE TABLE country (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  name TEXT NOT NULL,\n  continent_identifier INT NOT NULL,\n  CONSTRAINT `fk_continent_country` FOREIGN KEY (`continent_identifier`) REFERENCES `continent` (`id`)\n);\n")))),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"continent_identifier")," column doesn't have the foreign key suffix (",Object(i.b)("inlineCode",{parentName:"p"},"_id"),"). "),Object(i.b)("p",null,"For the ",Object(i.b)("inlineCode",{parentName:"p"},"one-to-one")," relationship, GraphQLize creates a field with the name ",Object(i.b)("inlineCode",{parentName:"p"},"continentByContinentIdentifer"),". The convention is ",Object(i.b)("inlineCode",{parentName:"p"},"{targetTableName}By{FKeyColumnNameInPascalCase}"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Country {\n  # ...\n  continentByContinentIdentifer : Continent!\n}\n")),Object(i.b)("p",null,"On the ",Object(i.b)("inlineCode",{parentName:"p"},"one-to-many")," side, the field name is the concatenation of the ",Object(i.b)("em",{parentName:"p"},"camelCase")," version of the foreign key column name (",Object(i.b)("inlineCode",{parentName:"p"},"continentIdentifer"),") with the pluralized form of the target table (",Object(i.b)("inlineCode",{parentName:"p"},"Countries"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Continent {\n  # ...\n  continentIdentiferCountries: [Country]!\n}\n")))}s.isMDXComponent=!0},161:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var b=i.a.createContext({}),p=function(e){var t=i.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},s=function(e){var t=p(e.components);return i.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),s=p(n),u=a,d=s["".concat(r,".").concat(u)]||s[u]||m[u]||l;return n?i.a.createElement(d,o({ref:t},b,{components:n})):i.a.createElement(d,o({ref:t},b))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var b=2;b<l;b++)r[b]=n[b];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},162:function(e,t,n){var a;!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var a=arguments[t];if(a){var l=typeof a;if("string"===l||"number"===l)e.push(a);else if(Array.isArray(a)&&a.length){var r=i.apply(null,a);r&&e.push(r)}else if("object"===l)for(var o in a)n.call(a,o)&&a[o]&&e.push(o)}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(a=function(){return i}.apply(t,[]))||(e.exports=a)}()},163:function(e,t,n){"use strict";var a=n(0);const i=Object(a.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{}});t.a=i},164:function(e,t,n){"use strict";var a=n(0),i=n.n(a);t.a=function(e){return i.a.createElement("div",null,e.children)}},165:function(e,t,n){"use strict";var a=n(0),i=n.n(a),l=n(163);var r=function(){return Object(a.useContext)(l.a)},o=n(162),c=n.n(o),b=n(94),p=n.n(b);const s=37,m=39;t.a=function(e){const{block:t,children:n,defaultValue:l,values:o,groupId:b}=e,{tabGroupChoices:u,setTabGroupChoices:d}=r(),[O,h]=Object(a.useState)(l);if(null!=b){const e=u[b];null!=e&&e!==O&&h(e)}const g=e=>{h(e),null!=b&&d(b,e)},j=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:c()("tabs",{"tabs--block":t})},o.map(({value:e,label:t})=>i.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":O===e,className:c()("tabs__item",p.a.tabItem,{"tabs__item--active":O===e}),key:e,ref:e=>j.push(e),onKeyDown:e=>((e,t,n)=>{switch(n.keyCode){case m:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case s:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(j,e.target,e),onFocus:()=>g(e),onClick:()=>g(e)},t))),i.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter(e=>e.props.value===O)[0]))}}}]);