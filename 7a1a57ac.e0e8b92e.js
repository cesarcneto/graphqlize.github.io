(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{132:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return p}));var a=n(2),r=(n(0),n(161));const l={id:"graphqlize-update-2",title:"GraphQLize Update (#2) - Supports Sorting, Filtering & MySQL Boolean Types",author:"Tamizhvendan S",author_title:"Author, GraphQLize",author_url:"https://github.com/tamizhvendan",author_image_url:"https://avatars1.githubusercontent.com/u/1128916?v=4",tags:["announcement","clojure","java","graphql","postgres","mysql","scala","kotlin"]},i={permalink:"/blog/graphqlize-update-2",source:"@site/blog/2020-04-20-graphqlize-update-2.mdx",description:"Hello World,",date:"2020-04-20T00:00:00.000Z",tags:[{label:"announcement",permalink:"/blog/tags/announcement"},{label:"clojure",permalink:"/blog/tags/clojure"},{label:"java",permalink:"/blog/tags/java"},{label:"graphql",permalink:"/blog/tags/graphql"},{label:"postgres",permalink:"/blog/tags/postgres"},{label:"mysql",permalink:"/blog/tags/mysql"},{label:"scala",permalink:"/blog/tags/scala"},{label:"kotlin",permalink:"/blog/tags/kotlin"}],title:"GraphQLize Update (#2) - Supports Sorting, Filtering & MySQL Boolean Types",readingTime:3.29,truncated:!0,prevItem:{title:"GraphQLize Update (#3) - Logical Operators & Filter by nested objects.",permalink:"/blog/graphqlize-update-3"},nextItem:{title:"GraphQLize Update (#1) - Pagination, Scalar Types, Scala & Kotlin Support",permalink:"/blog/graphqlize-update-1"}},o=[{value:"Sorting",id:"sorting",children:[]},{value:"Filtering",id:"filtering",children:[]},{value:"MySQL Boolean Data Type Support",id:"mysql-boolean-data-type-support",children:[]},{value:"What&#39;s Next?",id:"whats-next",children:[]}],c={rightToc:o};function p({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Hello World, "),Object(r.b)("p",null,"GraphQLize is ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.graphqlize.org/blog/announcing-graphqlize-alpha"}),"one month old now")," \ud83c\udf82, and it is getting better day by day. Almost 50% of the planned features are complete \ud83d\ude4c. "),Object(r.b)("p",null,"As usual in this blog post, I am going to share what's new in GraphQLize and what is in the pipeline for the next two weeks."),Object(r.b)("p",null,"Here we go!"),Object(r.b)("h2",{id:"sorting"},"Sorting"),Object(r.b)("p",null,"GraphQLize now enables sorting the query results using the ",Object(r.b)("inlineCode",{parentName:"p"},"orderBy")," argument. By default, you can use any of the table columns to sort the query results. In future, we can control this behaviour."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query languagesSortedByName {\n  # sorts using the `name` column in the `language` table\n  # highlight-next-line\n  languages(orderBy: {name: ASC}) {\n    name\n  }\n}\n")),Object(r.b)("p",null,"If you'd like to sort it in descending order, replace ",Object(r.b)("inlineCode",{parentName:"p"},"ASC")," with ",Object(r.b)("inlineCode",{parentName:"p"},"DESC"),". "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query languagesSortedByNameInDescOrder {\n  # highlight-next-line\n  languages(orderBy: {name: DESC}) {\n    name\n  }\n}\n")),Object(r.b)("p",null,"We can sort by multiple columns as well,"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # sorts the `actor` table by the `first_name` column \n  # and then by `last_name` column in descending order\n  # highlight-next-line\n  actors(orderBy: {firstName: ASC, lastName: DESC}) {\n    firstName\n    lastName\n  }\n}\n")),Object(r.b)("p",null,"GraphQLize also supports sorting nested objects. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  countryByCountryId(countryId: 2) {\n    country\n    # sorting one-to-many relationship\n    # highlight-next-line\n    cities(orderBy: {city: DESC}) {\n      city\n    }\n  }\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  actorByActorId(actorId: 148) {\n    firstName\n    # sorting many-to-many relationship\n    # highlight-next-line\n    films(orderBy: {title: DESC}) {\n      title\n    }\n  }\n}\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Currently, sorting nested objects in MySQL is not supported. ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/52"}),"It'll be fixed")," in a later release. "))),Object(r.b)("h2",{id:"filtering"},"Filtering"),Object(r.b)("p",null,"Filtering is another critical feature that was released in the last iteration. Like ",Object(r.b)("inlineCode",{parentName:"p"},"orderBy")," in sorting, we have the ",Object(r.b)("inlineCode",{parentName:"p"},"where")," argument using which we can specify the ",Object(r.b)("inlineCode",{parentName:"p"},"filter")," condition."),Object(r.b)("p",null,"Here are some of the examples of using ",Object(r.b)("inlineCode",{parentName:"p"},"eq"),", ",Object(r.b)("inlineCode",{parentName:"p"},"in"),", ",Object(r.b)("inlineCode",{parentName:"p"},"isNull")," and ",Object(r.b)("inlineCode",{parentName:"p"},"between")," filter conditions."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # highlight-next-line\n  cities(where: {cityId: {eq: 3}}) {\n    city\n  }\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # highlight-next-line\n  payments(where: {customerId: {in: [1, 2]}}) {\n    paymentId\n    amount\n  }\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # highlight-next-line\n  employees(where: {employeeReportsToId: {isNull: true}}) {\n    firstName\n    lastName\n  }\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'query {\n  # highlight-next-line\n  payments(where: {paymentDate: {between: {from: "2005-08-23T21:00:00", to: "2005-08-23T21:03:00"}}}) {\n    rentalId\n  }\n}\n')),Object(r.b)("p",null,"For the detailed set of supported filter conditions, you can check out ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.graphqlize.org/docs/queries/filtering-query-results"}),"this documentation"),"."),Object(r.b)("p",null,"We can filter the nested objects also. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'query {\n  countryByCountryId(countryId: 2) {\n    country\n    # filter one-to-many relationship\n    # highlight-next-line\n    cities(where: {city: {like: "B%"}}) {\n      cityId\n      city\n    }\n  }\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'query {\n  actorByActorId(actorId: 148) {\n    firstName\n    # filter many-to-many relationship\n    # highlight-next-line\n    films(where: {title: {like: "S%"}}) {\n      title\n    }\n  }\n}\n')),Object(r.b)("h2",{id:"mysql-boolean-data-type-support"},"MySQL Boolean Data Type Support"),Object(r.b)("p",null,"The last feature that was developed as part of the previous iteration is the support for MySQL ",Object(r.b)("inlineCode",{parentName:"p"},"boolean")," data type. "),Object(r.b)("p",null,"GraphQLize treats the column types ",Object(r.b)("inlineCode",{parentName:"p"},"BIT(1)")," and ",Object(r.b)("inlineCode",{parentName:"p"},"TINYINT(1)")," as the ",Object(r.b)("inlineCode",{parentName:"p"},"Boolean")," GraphQL scalar type. "),Object(r.b)("p",null,"Here is an example of using it in a filter condition to filter only ",Object(r.b)("inlineCode",{parentName:"p"},"active")," customers. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query { \n  # highlight-next-line\n  customers(where: {active: {eq: true}}) { \n    firstName \n  } \n}\n")),Object(r.b)("h2",{id:"whats-next"},"What's Next?"),Object(r.b)("p",null,"I am planning to take a short break for two days to sustain my progress and energy level. Then, I am going to work on the following issues for the next two weeks. "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Supporting ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/28"}),"and"),", ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/29"}),"or")," and ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/34"}),"not")," operators in the filter conditions.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Ability to filter based on the nested object's fields - ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/33"}),"GitHub Issue #33"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Filter based on the existence of nested objects - ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/38"}),"GitHub Issue #38")))),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"I am keeping this iteration light as I may not be able to spend some good quality time outside my work hours. In case, if I am free, I would take some more features around filtering. Let's see how it goes \ud83e\udd1e.")),Object(r.b)("p",null,"You can keep track of the progress by"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Following the ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://twitter.com/graphqlize"}),"GraphQLize Twitter account")),Object(r.b)("li",{parentName:"ul"},"Joining ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://discord.gg/akkdPqf"}),"GraphQLize's Discord")),Object(r.b)("li",{parentName:"ul"},"Subscribing to ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://tinyletter.com/graphqlize-org"}),"GraphQLize's newsletter"))),Object(r.b)("p",null,"\u2b50\ufe0f If you like GraphQLize, give it a star on ",Object(r.b)("a",{target:"_blank",rel:"noopener noreferrer",href:"https://github.com/graphqlize/graphqlize"},"GitHub"),"! \u2b50\ufe0f"),Object(r.b)("p",null,"That's all!"),Object(r.b)("p",null,"Cheers,",Object(r.b)("br",{parentName:"p"}),"\n","Tamizh"))}p.isMDXComponent=!0},161:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return g}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),b=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},s=function(e){var t=b(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=b(n),h=a,g=s["".concat(i,".").concat(h)]||s[h]||u[h]||l;return n?r.a.createElement(g,o({ref:t},p,{components:n})):r.a.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);