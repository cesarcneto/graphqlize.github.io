(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{126:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return b}));var a=n(2),r=(n(0),n(161));const i={id:"graphqlize-update-3",title:"GraphQLize Update (#3) - Logical Operators & Filter by nested objects.",author:"Tamizhvendan S",author_title:"Author, GraphQLize",author_url:"https://github.com/tamizhvendan",author_image_url:"https://avatars1.githubusercontent.com/u/1128916?v=4",tags:["announcement","clojure","java","graphql","postgres","mysql","scala","kotlin"]},l={permalink:"/blog/graphqlize-update-3",source:"@site/blog/2020-05-05-graphqlize-update-3.mdx",description:"Hello World,",date:"2020-05-05T00:00:00.000Z",tags:[{label:"announcement",permalink:"/blog/tags/announcement"},{label:"clojure",permalink:"/blog/tags/clojure"},{label:"java",permalink:"/blog/tags/java"},{label:"graphql",permalink:"/blog/tags/graphql"},{label:"postgres",permalink:"/blog/tags/postgres"},{label:"mysql",permalink:"/blog/tags/mysql"},{label:"scala",permalink:"/blog/tags/scala"},{label:"kotlin",permalink:"/blog/tags/kotlin"}],title:"GraphQLize Update (#3) - Logical Operators & Filter by nested objects.",readingTime:3.525,truncated:!0,nextItem:{title:"GraphQLize Update (#2) - Supports Sorting, Filtering & MySQL Boolean Types",permalink:"/blog/graphqlize-update-2"}},o=[{value:"Logical Operators",id:"logical-operators",children:[{value:"AND",id:"and",children:[]},{value:"OR",id:"or",children:[]},{value:"NOT",id:"not",children:[]}]},{value:"Filter by nested object(s)",id:"filter-by-nested-objects",children:[{value:"One to One",id:"one-to-one",children:[]},{value:"One to Many",id:"one-to-many",children:[]},{value:"Many to Many",id:"many-to-many",children:[]},{value:"Existence Check",id:"existence-check",children:[]}]},{value:"What&#39;s Next?",id:"whats-next",children:[]}],c={rightToc:o};function b({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Hello World, "),Object(r.b)("p",null,"The third iteration of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.graphqlize.org"}),"GraphQLize")," went well as planned and the filters in GraphQLize just got better :). "),Object(r.b)("p",null,"Let's take a peek at what's new in GraphQLize and what is in the pipeline for the next two weeks."),Object(r.b)("h2",{id:"logical-operators"},"Logical Operators"),Object(r.b)("p",null,"Now we can use logical operators ",Object(r.b)("inlineCode",{parentName:"p"},"and"),", ",Object(r.b)("inlineCode",{parentName:"p"},"or")," and ",Object(r.b)("inlineCode",{parentName:"p"},"not")," in the filters."),Object(r.b)("h3",{id:"and"},"AND"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # payments of a customer with the id `1` \n  # and amount greater than `5.99`\n  # highlight-next-line\n  payments(where: {and: {customerId: {eq: 1}, amount: {gt: 5.99}}}) {\n    paymentId\n    amount\n  }\n}\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"and")," also supports list of conditions. "),Object(r.b)("p",null,"The above query can be rewritten as"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # highlight-next-line \n  payments(where: {and: [{customerId: {eq: 1}, amount: {gt: 5.99}}]}) {\n    paymentId\n    amount\n  }\n}\n")),Object(r.b)("h3",{id:"or"},"OR"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"or")," is similar to ",Object(r.b)("inlineCode",{parentName:"p"},"and")," in syntax. It accepts both a single condition or a list of conditions. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'query {\n  # languages with the name either "English" or "French"\n  # highlight-next-line\n  languages(where: {or: [{name: {eq: "English"}}, {name: {eq: "French"}}]}) {\n    languageId\n    name\n  }\n}\n')),Object(r.b)("h3",{id:"not"},"NOT"),Object(r.b)("p",null,"Using the ",Object(r.b)("inlineCode",{parentName:"p"},"not")," operator we can invert the filter condition. "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'query {\n  # languages with the name except "English" or "French"\n  # highlight-next-line\n  languages(where: {not: {or: [{name: {eq: "English"}}, {name: {eq: "French"}}]}}) {\n    languageId\n    name\n  }\n}\n')),Object(r.b)("h2",{id:"filter-by-nested-objects"},"Filter by nested object(s)"),Object(r.b)("p",null,"Another major feature that was added during the last iteration is filtering the resulting objects based on the fields of a nested object(s)."),Object(r.b)("h3",{id:"one-to-one"},"One to One"),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/address_city_country_er_diagram.png",alt:null}))),Object(r.b)("p",null,"For example, to get all the cities of a country using the country's name in the above schema, We can query it as "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'query {\n  # highlight-next-line\n  cities(where: {country: {country: {eq : "Algeria"}}}) {\n    cityId\n    city\n  }\n}\n')),Object(r.b)("h3",{id:"one-to-many"},"One to Many"),Object(r.b)("p",null,"If the nested object has ",Object(r.b)("inlineCode",{parentName:"p"},"one-to-many")," relationship with its parent, the filter condition yield the results if ",Object(r.b)("strong",{parentName:"p"},"at-least one")," of the nested object's field(s) satisfy the condition."),Object(r.b)("p",null,"For the above schema, we can get a list of countries which has at-least one city that starts with ",Object(r.b)("inlineCode",{parentName:"p"},"Ab")," using the below query."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # returns countries which has at-least one city \n  # with the name like 'AB%'\n  # highlight-next-line\n  countries(where: {cities: {city: {like: \"Ab%\"}}}) {\n    countryId\n    country\n  }\n}\n")),Object(r.b)("h3",{id:"many-to-many"},"Many to Many"),Object(r.b)("p",null,"A filter based on a nested object with the ",Object(r.b)("inlineCode",{parentName:"p"},"many-to-many")," relationship behaves the same as that of ",Object(r.b)("inlineCode",{parentName:"p"},"one-to-many"),"."),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/film_actor_er_diagram.png",alt:null}))),Object(r.b)("p",null,"For the above schema, to get the actors who are part of ",Object(r.b)("strong",{parentName:"p"},"at-lease")," one film which has the word ",Object(r.b)("inlineCode",{parentName:"p"},"LIFE")," in its title."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),'query {\n  # highlight-next-line\n  actors(where: {films: {title: {:like "%LIFE%"}}}) {\n    firstName\n    lastName\n  }\n}\n')),Object(r.b)("p",null,"Let's assume that we have a schema like below "),Object(r.b)("p",null,Object(r.b)("img",Object(a.a)({parentName:"p"},{src:"/img/author_course_er_diagram.png",alt:null}))),Object(r.b)("p",null,"To filter authors who has ",Object(r.b)("strong",{parentName:"p"},"at-least")," one course with the rating ",Object(r.b)("inlineCode",{parentName:"p"},"5"),", we can achieve it using the following query."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # highlight-next-line\n  authors(where: {courses : {rating: {eq: 5}}}) {\n    firstName\n    lastName\n  }\n}\n")),Object(r.b)("p",null,"If we want to filter only the authors who has got the rating ",Object(r.b)("inlineCode",{parentName:"p"},"5")," in ",Object(r.b)("strong",{parentName:"p"},"all")," their courses, we can achieve it by"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # highlight-next-line\n  authors(where: {not: {courses : {rating: {neq: 5}}}}) {\n    firstName\n    lastName\n  }\n}\n")),Object(r.b)("p",null,"We are making use of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://gerardnico.com/data/type/relation/sql/anti_join"}),"SQL anti-join")," here by inverting the whole condition using ",Object(r.b)("inlineCode",{parentName:"p"},"not")," and complementing the inner condition using its reverse (",Object(r.b)("inlineCode",{parentName:"p"},"neq")," in the place of ",Object(r.b)("inlineCode",{parentName:"p"},"eq"),")."),Object(r.b)("h3",{id:"existence-check"},"Existence Check"),Object(r.b)("p",null,"GraphQLize provides a special filter parameter ",Object(r.b)("inlineCode",{parentName:"p"},"have")," to filter based on the existence of child objects. For example, in the above schema, if we'd like to filter only the authors who have courses, it can be achieved using the following query."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # highlight-next-line\n  authors(where: {have: courses}) {\n    firstName\n    lastName\n  }\n}\n")),Object(r.b)("p",null,"Suppose, if we want to filter authors who don't have ",Object(r.b)("inlineCode",{parentName:"p"},"courses"),", we can make use of the ",Object(r.b)("inlineCode",{parentName:"p"},"not")," in addition to ",Object(r.b)("inlineCode",{parentName:"p"},"have")," in the filter."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"query {\n  # highlight-next-line\n  authors(where: {not: {have:courses}}) {\n    firstName\n    lastName\n  }\n}\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The ",Object(r.b)("inlineCode",{parentName:"p"},"have")," parameter is available only in the ",Object(r.b)("inlineCode",{parentName:"p"},"one-to-many")," and ",Object(r.b)("inlineCode",{parentName:"p"},"many-to-many")," relationship fields")),Object(r.b)("h2",{id:"whats-next"},"What's Next?"),Object(r.b)("p",null,"The focus of the next iteration of GraphQLize is adding support for SQL aggregate functions. "),Object(r.b)("p",null,"You can keep track of the progress by"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Following the ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://twitter.com/graphqlize"}),"GraphQLize Twitter account")),Object(r.b)("li",{parentName:"ul"},"Joining ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://discord.gg/akkdPqf"}),"GraphQLize's Discord")),Object(r.b)("li",{parentName:"ul"},"Subscribing to ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://tinyletter.com/graphqlize-org"}),"GraphQLize's newsletter"))),Object(r.b)("p",null,"Cheers,",Object(r.b)("br",{parentName:"p"}),"\n","Tamizh"))}b.isMDXComponent=!0},161:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return g}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o({},t,{},e)),n},s=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),s=p(n),u=a,g=s["".concat(l,".").concat(u)]||s[u]||h[u]||i;return n?r.a.createElement(g,o({ref:t},b,{components:n})):r.a.createElement(g,o({ref:t},b))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var b=2;b<i;b++)l[b]=n[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);