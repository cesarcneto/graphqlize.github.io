/*! For license information please see b078aec5.3c5135f9.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{133:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return m}));var n=a(1),i=a(6),r=(a(0),a(150)),l=a(154),o=a(153),c={id:"relationships",title:"Relationships",sidebar_label:"Relationships"},b={id:"graphql_schema/relationships",title:"Relationships",description:"GraphQLize identifies the relationships between database tables using their foreign keys, and generate appropriate relationship fields (connections) in the resulting GraphQL schema.",source:"@site/docs/graphql_schema/relationships.mdx",permalink:"/docs/graphql_schema/relationships",editUrl:"https://github.com/graphqlize/graphqlize.github.io/tree/source/docs/graphql_schema/relationships.mdx",sidebar_label:"Relationships",sidebar:"docs",previous:{title:"Types & Fields",permalink:"/docs/graphql_schema/types-and-fields"},next:{title:"Custom Scalar Types",permalink:"/docs/graphql_schema/custom-scalar-types"}},p=[{value:"One to One",id:"one-to-one",children:[]},{value:"One to Many",id:"one-to-many",children:[]},{value:"Many to Many",id:"many-to-many",children:[]}],s={rightToc:p};function m(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"GraphQLize identifies the relationships between database tables using their foreign keys, and generate appropriate relationship fields (connections) in the resulting GraphQL schema."),Object(r.b)("h2",{id:"one-to-one"},"One to One"),Object(r.b)("p",null,Object(r.b)("img",Object(n.a)({parentName:"p"},{src:"/img/address_city_country_er_diagram.png",alt:null}))),Object(r.b)("p",null,"For the database table relationships like above, GraphQLize infers two ",Object(r.b)("inlineCode",{parentName:"p"},"one-to-one")," relationships."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"An ",Object(r.b)("inlineCode",{parentName:"p"},"address")," is associated with a ",Object(r.b)("inlineCode",{parentName:"p"},"city")," via ",Object(r.b)("inlineCode",{parentName:"p"},"city_id")," column in the ",Object(r.b)("inlineCode",{parentName:"p"},"address")," table.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"city")," is associated with a ",Object(r.b)("inlineCode",{parentName:"p"},"country")," via ",Object(r.b)("inlineCode",{parentName:"p"},"country_id")," column in the ",Object(r.b)("inlineCode",{parentName:"p"},"city")," table."))),Object(r.b)("p",null,"GraphQLize then create two object relationships in the ",Object(r.b)("inlineCode",{parentName:"p"},"Address")," and the ",Object(r.b)("inlineCode",{parentName:"p"},"City")," type respectively."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type Address {\n  # ...\n  city: City!\n}\n\ntype City {\n  # ...\n  country: Country!\n}\n")),Object(r.b)("p",null,"The generated field name is the ",Object(r.b)("em",{parentName:"p"},"camelCase")," version of the corresponding column name with the id suffix (",Object(r.b)("inlineCode",{parentName:"p"},"_id"),") removed."),Object(r.b)("p",null,"Here are some of the examples."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Column Name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"GraphQL Field Name"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"actor_id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"actor")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"original_language_id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"originalLanguage")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"reports_to_employee_id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"reportsToEmployee")))),Object(r.b)("p",null,"By default, GraphQLize assumes ",Object(r.b)("inlineCode",{parentName:"p"},"_id")," as the suffix for foreign keys in both Postgres and MySQL."),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/4"}),"In future"),", GraphQLize will provide a configuration to override this default behaviour."),Object(r.b)("h2",{id:"one-to-many"},"One to Many"),Object(r.b)("p",null,Object(r.b)("img",Object(n.a)({parentName:"p"},{src:"/img/address_city_country_er_diagram.png",alt:null}))),Object(r.b)("p",null,"For the database table relationships like above, GraphQLize infers two ",Object(r.b)("inlineCode",{parentName:"p"},"one-to-many")," relationships."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"city")," has many ",Object(r.b)("inlineCode",{parentName:"p"},"address")," (addresses) via ",Object(r.b)("inlineCode",{parentName:"p"},"city_id")," column in the ",Object(r.b)("inlineCode",{parentName:"p"},"address")," table.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"A ",Object(r.b)("inlineCode",{parentName:"p"},"country")," has many ",Object(r.b)("inlineCode",{parentName:"p"},"city")," (cities) via ",Object(r.b)("inlineCode",{parentName:"p"},"country_id")," column in the ",Object(r.b)("inlineCode",{parentName:"p"},"city")," table."))),Object(r.b)("p",null,"GraphQLize then create two array relationships in the ",Object(r.b)("inlineCode",{parentName:"p"},"City")," and the ",Object(r.b)("inlineCode",{parentName:"p"},"Country")," type respectively."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type City {\n  # ...\n  addresses: [Address]!\n}\n\ntype Country {\n  # ...\n  cities: [City]!\n}\n")),Object(r.b)("p",null,"The generated field name is the ",Object(r.b)("em",{parentName:"p"},"camelCase")," version of the corresponding target table's pluralized name."),Object(r.b)("p",null,"If a table has multiple foreign keys to the same table as below,"),Object(r.b)(l.a,{defaultValue:"postgres",values:[{label:"Postgres",value:"postgres"},{label:"MySQL",value:"mysql"}],mdxType:"Tabs"},Object(r.b)(o.a,{value:"postgres",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE language (\n  language_id serial PRIMARY KEY,\n  name character(20) NOT NULL\n);\n\nCREATE TABLE film (\n  film_id serial PRIMARY KEY,\n  title character varying(255) NOT NULL,\n\n  language_id smallint NOT NULL REFERENCES language(language_id),\n  original_language_id smallint REFERENCES language(language_id)\n);\n\n"))),Object(r.b)(o.a,{value:"mysql",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE language (\n  language_id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  name CHAR(20) NOT NULL,\n  PRIMARY KEY (language_id)\n);\n\nCREATE TABLE film (\n  film_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,\n  title VARCHAR(255) NOT NULL,\n  language_id TINYINT UNSIGNED NOT NULL,\n  original_language_id TINYINT UNSIGNED DEFAULT NULL,\n  PRIMARY KEY  (film_id),\n  CONSTRAINT fk_film_language FOREIGN KEY (language_id) REFERENCES language (language_id),\n  CONSTRAINT fk_film_language_original FOREIGN KEY (original_language_id) REFERENCES language (language_id)\n);\n")))),Object(r.b)("p",null,"GraphQLize creates two ",Object(r.b)("inlineCode",{parentName:"p"},"one-to-many")," relationships between ",Object(r.b)("inlineCode",{parentName:"p"},"language")," and ",Object(r.b)("inlineCode",{parentName:"p"},"films"),". "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"language")," has many ",Object(r.b)("inlineCode",{parentName:"li"},"film")," (films) via ",Object(r.b)("inlineCode",{parentName:"li"},"language_id")," column in the ",Object(r.b)("inlineCode",{parentName:"li"},"film")," table. "),Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"language")," has many ",Object(r.b)("inlineCode",{parentName:"li"},"film")," (films) via ",Object(r.b)("inlineCode",{parentName:"li"},"original_language_id")," column in the ",Object(r.b)("inlineCode",{parentName:"li"},"film")," table.")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type Language {\n  languageId: Int!\n  name: String!\n\n  films: [Film]!\n  originalLanguageFilms: [Film]!\n}\n")),Object(r.b)("p",null,"The nomenclature used here to generate the field name follows the below logic."),Object(r.b)("p",null,"If the column name (",Object(r.b)("inlineCode",{parentName:"p"},"language_id"),") after the removal of the foreign key suffix (",Object(r.b)("inlineCode",{parentName:"p"},"language"),") matches the source table name, then the resulting field name is the ",Object(r.b)("em",{parentName:"p"},"camelCase")," version of the pluralized form of the  table (",Object(r.b)("inlineCode",{parentName:"p"},"films"),")."),Object(r.b)("p",null,"If the column name (",Object(r.b)("inlineCode",{parentName:"p"},"original_language_id"),") after the removal of the foreign key suffix (",Object(r.b)("inlineCode",{parentName:"p"},"original_language"),") did not match the source table name, then GraphQLize removes the foreign key suffix and concatenate with the pluralized form of the target table and then convert it to its ",Object(r.b)("em",{parentName:"p"},"camelCase")," version (",Object(r.b)("inlineCode",{parentName:"p"},"originalLanguageFilms"),")."),Object(r.b)("h2",{id:"many-to-many"},"Many to Many"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"many-to-many")," relationship is a bit tricky to figure out. "),Object(r.b)("p",null,"GraphQLize traverses each table's metadata to figure out whether it is an ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Associative_entity"}),"associative table")," or not. "),Object(r.b)("p",null,"A table is considered as an associative table if it satisfies the following two criteria"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"It should have a primary key made of two columns."),Object(r.b)("li",{parentName:"ol"},"These primary key columns should be a subset of the foreign key columns present in that table. ")),Object(r.b)("p",null,"For the database table relationships like below,"),Object(r.b)("p",null,Object(r.b)("img",Object(n.a)({parentName:"p"},{src:"/img/film_actor_er_diagram.png",alt:null}))),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"film_actor")," table is an associative table as"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"It has ",Object(r.b)("inlineCode",{parentName:"li"},"actor_id")," and ",Object(r.b)("inlineCode",{parentName:"li"},"film_id")," as the primary keys."),Object(r.b)("li",{parentName:"ol"},"The primay keys ",Object(r.b)("inlineCode",{parentName:"li"},"{actor_id, film_id}")," is a subset of foreign keys ",Object(r.b)("inlineCode",{parentName:"li"},"{actor_id, film_id}")," of the ",Object(r.b)("inlineCode",{parentName:"li"},"film_actor")," table. ")),Object(r.b)("p",null,"In this scenario, GraphQLize creates two array fields for these two ",Object(r.b)("inlineCode",{parentName:"p"},"many-to-many")," relationships.  "),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type Film {\n  actors: [Actor]!\n  # ...\n}\ntype Actor {\n  films: [Film]!\n  # ...\n}\n")),Object(r.b)("p",null,"For the relationships between ",Object(r.b)("inlineCode",{parentName:"p"},"film")," & ",Object(r.b)("inlineCode",{parentName:"p"},"film_actor")," and ",Object(r.b)("inlineCode",{parentName:"p"},"film_actor")," & ",Object(r.b)("inlineCode",{parentName:"p"},"actor")," tables, GraphQLize creates the following fields. "),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"type Film {\n  # ...\n  filmActors: [FilmActor]!\n}\n\ntype FilmActor {\n  actor: Actor!\n  film: Film!\n  # ...\n}\n\ntype Actor {\n  # ...\n  filmActors: [FilmActor]!\n}\n")))}m.isMDXComponent=!0},150:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return d}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var b=i.a.createContext({}),p=function(e){var t=i.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):o({},t,{},e)),a},s=function(e){var t=p(e.components);return i.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),s=p(a),u=n,d=s["".concat(l,".").concat(u)]||s[u]||m[u]||r;return a?i.a.createElement(d,o({ref:t},b,{components:a})):i.a.createElement(d,o({ref:t},b))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var b=2;b<r;b++)l[b]=a[b];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},151:function(e,t,a){var n;!function(){"use strict";var a={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var r=typeof n;if("string"===r||"number"===r)e.push(n);else if(Array.isArray(n)&&n.length){var l=i.apply(null,n);l&&e.push(l)}else if("object"===r)for(var o in n)a.call(n,o)&&n[o]&&e.push(o)}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(n=function(){return i}.apply(t,[]))||(e.exports=n)}()},152:function(e,t,a){"use strict";var n=a(0);const i=Object(n.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{}});t.a=i},153:function(e,t,a){"use strict";var n=a(0),i=a.n(n);t.a=function(e){return i.a.createElement("div",null,e.children)}},154:function(e,t,a){"use strict";var n=a(0),i=a.n(n),r=a(152);var l=function(){return Object(n.useContext)(r.a)},o=a(151),c=a.n(o),b=a(95),p=a.n(b);const s=37,m=39;t.a=function(e){const{block:t,children:a,defaultValue:r,values:o,groupId:b}=e,{tabGroupChoices:u,setTabGroupChoices:d}=l(),[O,h]=Object(n.useState)(r);if(null!=b){const e=u[b];null!=e&&e!==O&&h(e)}const g=e=>{h(e),null!=b&&d(b,e)},j=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:c()("tabs",{"tabs--block":t})},o.map(({value:e,label:t})=>i.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":O===e,className:c()("tab-item",p.a.tabItem,{"tab-item--active":O===e}),key:e,ref:e=>j.push(e),onKeyDown:e=>((e,t,a)=>{switch(a.keyCode){case m:((e,t)=>{const a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()})(e,t);break;case s:((e,t)=>{const a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()})(e,t)}})(j,e.target,e),onFocus:()=>g(e),onClick:()=>g(e)},t))),i.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(a).filter(e=>e.props.value===O)[0]))}}}]);