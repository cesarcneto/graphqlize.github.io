(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{116:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(1),r=n(6),i=(n(0),n(140)),o={id:"relationships",title:"Relationships",sidebar_label:"Relationships"},l={id:"graphql_schema/relationships",title:"Relationships",description:"GraphQLize identifies the relationships between database tables using their foreign keys, and generate appropriate relationship fields (conections) in the resulting GraphQL schema.",source:"@site/docs/graphql_schema/relationships.mdx",permalink:"/docs/graphql_schema/relationships",editUrl:"https://github.com/graphqlize/graphqlize.github.io/tree/source/docs/graphql_schema/relationships.mdx",sidebar_label:"Relationships",sidebar:"docs",previous:{title:"GraphQL Schema",permalink:"/docs/graphql_schema/intro"},next:{title:"Custom Scalar Types",permalink:"/docs/graphql_schema/custom-scalar-types"}},c=[{value:"One to One",id:"one-to-one",children:[]},{value:"One to Many",id:"one-to-many",children:[]},{value:"Many to Many",id:"many-to-many",children:[]}],p={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"GraphQLize identifies the relationships between database tables using their foreign keys, and generate appropriate relationship fields (conections) in the resulting GraphQL schema."),Object(i.b)("h2",{id:"one-to-one"},"One to One"),Object(i.b)("p",null,Object(i.b)("img",Object(a.a)({parentName:"p"},{src:"/img/address_city_country_er_diagram.png",alt:null}))),Object(i.b)("p",null,"For the database table relationships like above, GraphQLize infers two ",Object(i.b)("inlineCode",{parentName:"p"},"one-to-one")," relationships."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"A ",Object(i.b)("inlineCode",{parentName:"p"},"address")," is associated with a ",Object(i.b)("inlineCode",{parentName:"p"},"city")," via ",Object(i.b)("inlineCode",{parentName:"p"},"city_id")," column in the ",Object(i.b)("inlineCode",{parentName:"p"},"address")," table.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"A ",Object(i.b)("inlineCode",{parentName:"p"},"city")," is associated with a ",Object(i.b)("inlineCode",{parentName:"p"},"country")," via ",Object(i.b)("inlineCode",{parentName:"p"},"country_id")," column in the ",Object(i.b)("inlineCode",{parentName:"p"},"city")," table."))),Object(i.b)("p",null,"GraphQLize then create two object relationsips in the ",Object(i.b)("inlineCode",{parentName:"p"},"Address")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"City")," type respectively"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type Address {\n  # ...\n  city: City!\n}\n\ntype City {\n  # ...\n  country: Country!\n}\n")),Object(i.b)("p",null,"The generated field name is the ",Object(i.b)("em",{parentName:"p"},"camelCase")," version of the corresponding column name with the id suffix ",Object(i.b)("inlineCode",{parentName:"p"},"_id")," removed."),Object(i.b)("p",null,"Here are some of the examples."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Column Name"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"GraphQL Field Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"actor_id"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"actor")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"original_language_id"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"originalLanguage")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"reports_to_employee_id"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"reportsToEmployee")))),Object(i.b)("p",null,"By default, GraphQLize assumes ",Object(i.b)("inlineCode",{parentName:"p"},"_id")," as the suffix for foriegn keys in both Postgres and MySQL."),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphqlize/graphqlize/issues/4"}),"In future"),", GraphQLize will provide a configuration to override this default behaviour."),Object(i.b)("h2",{id:"one-to-many"},"One to Many"),Object(i.b)("h2",{id:"many-to-many"},"Many to Many"))}b.isMDXComponent=!0},140:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),b=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},s=function(e){var t=b(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=b(n),d=a,m=s["".concat(o,".").concat(d)]||s[d]||u[d]||i;return n?r.a.createElement(m,l({ref:t},p,{components:n})):r.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);